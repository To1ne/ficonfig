#!/usr/bin/ruby
require 'pp'

# extend String
class String
  def undent
    gsub(/^.{#{slice(/^ +/).length}}/, '')
  end
    ANSI_ESC = Hash[
       :reset           =>  0,
       :bold            =>  1,
       :dark            =>  2,
       :italic          =>  3, # not widely implemented
       :underline       =>  4,
       :blink           =>  5,
       :rapid_blink     =>  6, # not widely implemented
       :negative        =>  7, # no reverse because of String#reverse
       :concealed       =>  8,
       :strikethrough   =>  9, # not widely implemented
       :black           => 30,
       :red             => 31,
       :green           => 32,
       :yellow          => 33,
       :blue            => 34,
       :magenta         => 35,
       :cyan            => 36,
       :white           => 37,
       :on_black        => 40,
       :on_red          => 41,
       :on_green        => 42,
       :on_yellow       => 43,
       :on_blue         => 44,
       :on_magenta      => 45,
       :on_cyan         => 46,
       :on_white        => 47,
    ]
  def ansi_escape(name)
    sym = namef.to_sym
    if !ANSI_ESC.has_key?(sym)
      raise ArgumentError
    end
    "\e[#{ANSI_ESC[sym]}m#{to_s}\e[0m"
  end
  def method_missing(meth, *args, &block)
    begin
      ansi_escape(meth)
    rescue ArgumentError
      raise NoMethodError
    end
  end
end

module Ficonfig
  VERSION   = '0.1'
  INDENT    = '     '

  def Ficonfig.usage
    puts <<-EOS.undent
    ficonfig: #{VERSION}
       ifconfig beautified
    EOS
  end # def

  class Ficonfig::Fi
    def initialize(str)
      # Parse the string
      @name = str[/^[^\s:]+/]
      one_phy = '[\dA-Fa-f]{2}'
      @physical = str[/(?:#{one_phy}\:){5}#{one_phy}/]
    end # def

    def to_s
      text = @name.green + "\n"
      text += INDENT + "physical: " + @physical.red + "\n" if @physical
      text + "\n"
    end # def

  end # class

  def Ficonfig.ficonfig
    if ARGV.size > 0
      puts "ficonfig does not support arguments (yet)"
      # TODO fix this
      system "ifconfig #{ARGV}"
      return
    end # if
    plain = %x{"ifconfig"}
    # Split the interfaces
    ifs = []
    plain.split(/\n\S/).each do |ln|
      ifs << Fi.new(ln)
    end # each
    puts ifs.to_s
  end # def
end # module

# Parse some special arguments
case ARGV.first
when '-h', '--help', '--usage', 'help'
  Ficonfig::usage
  exit 0
when '--version', '-v'
  puts Ficonfig::VERSION
  exit 0
end

Ficonfig::ficonfig

# Example output of ifconfig below
__END__
lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384
	inet6 ::1 prefixlen 128 
	inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 
	inet 127.0.0.1 netmask 0xff000000 
gif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
stf0: flags=0<> mtu 1280
en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 00:23:df:9f:b7:02 
	media: autoselect
	status: inactive
en1: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 00:24:36:b0:b7:4f 
	inet6 fe80::224:36ff:feb0:b74f%en1 prefixlen 64 scopeid 0x5 
	inet 192.168.2.101 netmask 0xffffff00 broadcast 192.168.2.255
	inet6 2002:d576:1d5a:1234:224:36ff:feb0:b74f prefixlen 64 autoconf 
	media: autoselect
	status: active
fw0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 4078
	lladdr 00:23:df:ff:fe:9f:b7:02 
	media: autoselect <full-duplex>
	status: inactive
vmnet8: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 00:50:56:c0:00:08 
	inet 192.168.207.1 netmask 0xffffff00 broadcast 192.168.207.255
vmnet1: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 00:50:56:c0:00:01 
	inet 192.168.58.1 netmask 0xffffff00 broadcast 192.168.58.255

eth0      Link encap:Ethernet  HWaddr 00:E0:7D:B4:57:5D
          inet addr:10.0.0.150  Bcast:10.0.0.255  Mask:255.255.255.0
          inet6 addr: fe80::2e0:7dff:feb4:575d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:7942687 errors:0 dropped:0 overruns:0 frame:0
          TX packets:11226689 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1546161234 (1.4 GiB)  TX bytes:2389003399 (2.2 GiB)
          Interrupt:16 Base address:0x1000

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:22356 errors:0 dropped:0 overruns:0 frame:0
          TX packets:22356 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1441595 (1.3 MiB)  TX bytes:1441595 (1.3 MiB)
